//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :4.0.30319.42000
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WindowsFormsApp1.ServiceAdressBook {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceAdressBook.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        string GetData(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetData", ReplyAction="http://tempuri.org/IService1/GetDataResponse")]
        System.Threading.Tasks.Task<string> GetDataAsync(int value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        RepertoireService.CompositeType GetDataUsingDataContract(RepertoireService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService1/GetDataUsingDataContractResponse")]
        System.Threading.Tasks.Task<RepertoireService.CompositeType> GetDataUsingDataContractAsync(RepertoireService.CompositeType composite);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllContact", ReplyAction="http://tempuri.org/IService1/getAllContactResponse")]
        RepertoireService.Model.contact[] getAllContact();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAllContact", ReplyAction="http://tempuri.org/IService1/getAllContactResponse")]
        System.Threading.Tasks.Task<RepertoireService.Model.contact[]> getAllContactAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addContact", ReplyAction="http://tempuri.org/IService1/addContactResponse")]
        bool addContact(RepertoireService.Model.contact user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addContact", ReplyAction="http://tempuri.org/IService1/addContactResponse")]
        System.Threading.Tasks.Task<bool> addContactAsync(RepertoireService.Model.contact user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/supprimerContact", ReplyAction="http://tempuri.org/IService1/supprimerContactResponse")]
        bool supprimerContact(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/supprimerContact", ReplyAction="http://tempuri.org/IService1/supprimerContactResponse")]
        System.Threading.Tasks.Task<bool> supprimerContactAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/searchContact", ReplyAction="http://tempuri.org/IService1/searchContactResponse")]
        RepertoireService.Model.contact[] searchContact(string nom, string prenom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/searchContact", ReplyAction="http://tempuri.org/IService1/searchContactResponse")]
        System.Threading.Tasks.Task<RepertoireService.Model.contact[]> searchContactAsync(string nom, string prenom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/editContact", ReplyAction="http://tempuri.org/IService1/editContactResponse")]
        bool editContact(RepertoireService.Model.contact user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/editContact", ReplyAction="http://tempuri.org/IService1/editContactResponse")]
        System.Threading.Tasks.Task<bool> editContactAsync(RepertoireService.Model.contact user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getIdMatch", ReplyAction="http://tempuri.org/IService1/getIdMatchResponse")]
        RepertoireService.Model.contact getIdMatch(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getIdMatch", ReplyAction="http://tempuri.org/IService1/getIdMatchResponse")]
        System.Threading.Tasks.Task<RepertoireService.Model.contact> getIdMatchAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ajoutNumContact", ReplyAction="http://tempuri.org/IService1/ajoutNumContactResponse")]
        bool ajoutNumContact(RepertoireService.Model.numtel pers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ajoutNumContact", ReplyAction="http://tempuri.org/IService1/ajoutNumContactResponse")]
        System.Threading.Tasks.Task<bool> ajoutNumContactAsync(RepertoireService.Model.numtel pers);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/afficherNumTel", ReplyAction="http://tempuri.org/IService1/afficherNumTelResponse")]
        RepertoireService.Model.numtel[] afficherNumTel();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/afficherNumTel", ReplyAction="http://tempuri.org/IService1/afficherNumTelResponse")]
        System.Threading.Tasks.Task<RepertoireService.Model.numtel[]> afficherNumTelAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getNumberOfContact", ReplyAction="http://tempuri.org/IService1/getNumberOfContactResponse")]
        string getNumberOfContact();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getNumberOfContact", ReplyAction="http://tempuri.org/IService1/getNumberOfContactResponse")]
        System.Threading.Tasks.Task<string> getNumberOfContactAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WindowsFormsApp1.ServiceAdressBook.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WindowsFormsApp1.ServiceAdressBook.IService1>, WindowsFormsApp1.ServiceAdressBook.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetData(int value) {
            return base.Channel.GetData(value);
        }
        
        public System.Threading.Tasks.Task<string> GetDataAsync(int value) {
            return base.Channel.GetDataAsync(value);
        }
        
        public RepertoireService.CompositeType GetDataUsingDataContract(RepertoireService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContract(composite);
        }
        
        public System.Threading.Tasks.Task<RepertoireService.CompositeType> GetDataUsingDataContractAsync(RepertoireService.CompositeType composite) {
            return base.Channel.GetDataUsingDataContractAsync(composite);
        }
        
        public RepertoireService.Model.contact[] getAllContact() {
            return base.Channel.getAllContact();
        }
        
        public System.Threading.Tasks.Task<RepertoireService.Model.contact[]> getAllContactAsync() {
            return base.Channel.getAllContactAsync();
        }
        
        public bool addContact(RepertoireService.Model.contact user) {
            return base.Channel.addContact(user);
        }
        
        public System.Threading.Tasks.Task<bool> addContactAsync(RepertoireService.Model.contact user) {
            return base.Channel.addContactAsync(user);
        }
        
        public bool supprimerContact(int id) {
            return base.Channel.supprimerContact(id);
        }
        
        public System.Threading.Tasks.Task<bool> supprimerContactAsync(int id) {
            return base.Channel.supprimerContactAsync(id);
        }
        
        public RepertoireService.Model.contact[] searchContact(string nom, string prenom) {
            return base.Channel.searchContact(nom, prenom);
        }
        
        public System.Threading.Tasks.Task<RepertoireService.Model.contact[]> searchContactAsync(string nom, string prenom) {
            return base.Channel.searchContactAsync(nom, prenom);
        }
        
        public bool editContact(RepertoireService.Model.contact user) {
            return base.Channel.editContact(user);
        }
        
        public System.Threading.Tasks.Task<bool> editContactAsync(RepertoireService.Model.contact user) {
            return base.Channel.editContactAsync(user);
        }
        
        public RepertoireService.Model.contact getIdMatch(int id) {
            return base.Channel.getIdMatch(id);
        }
        
        public System.Threading.Tasks.Task<RepertoireService.Model.contact> getIdMatchAsync(int id) {
            return base.Channel.getIdMatchAsync(id);
        }
        
        public bool ajoutNumContact(RepertoireService.Model.numtel pers) {
            return base.Channel.ajoutNumContact(pers);
        }
        
        public System.Threading.Tasks.Task<bool> ajoutNumContactAsync(RepertoireService.Model.numtel pers) {
            return base.Channel.ajoutNumContactAsync(pers);
        }
        
        public RepertoireService.Model.numtel[] afficherNumTel() {
            return base.Channel.afficherNumTel();
        }
        
        public System.Threading.Tasks.Task<RepertoireService.Model.numtel[]> afficherNumTelAsync() {
            return base.Channel.afficherNumTelAsync();
        }
        
        public string getNumberOfContact() {
            return base.Channel.getNumberOfContact();
        }
        
        public System.Threading.Tasks.Task<string> getNumberOfContactAsync() {
            return base.Channel.getNumberOfContactAsync();
        }
    }
}
